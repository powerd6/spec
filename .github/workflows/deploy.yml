name: Deploy
run-name: ${{ github.event_name == 'release' && github.ref_name || inputs.version }}

concurrency:
  cancel-in-progress: false
  group: '${{ github.workflow }}'

on:
  release:
    types:
      - published
      - edited
  workflow_dispatch:
    inputs:
      version:
        description: The version (the release name) to deploy
        type: string
        required: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  setup:
    name: Setup references
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.ref.outputs.ref }}
    steps:
      - name: Trigger on release
        if: ${{ github.event_name == 'release' }}
        run: echo "REF=${{ github.ref_name }}" >> "$GITHUB_ENV"
      - name: Trigger on manual dispatch
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "REF=${{ inputs.version }}" >> "$GITHUB_ENV"
      - name: Set reference
        id: ref
        run: echo "ref=$REF" >> "$GITHUB_OUTPUT"
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
      - name: Install latest mdbook
        run: |
          tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
          url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"
          mkdir bin
          curl -sSL "$url" | tar -xz --directory=bin
          echo "$(pwd)/bin" >> "$GITHUB_PATH"
      - name: Build book
        run: mdbook build
      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: ${{needs.setup.outputs.ref}}
          path: book
          if-no-files-found: error
  attach:
    name: Attach to release
    runs-on: ubuntu-latest
    needs: 
      - setup
      - build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GH_ADMIN_TOKEN }}
          name: ${{needs.setup.outputs.ref}}
          path: book
      - name: Compress
        run: tar -C ./book -cvf ${{needs.setup.outputs.ref}}.tar ./
      - name: Attach to release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
        run: gh release upload ${{needs.setup.outputs.ref}} ${{needs.setup.outputs.ref}}.tar --clobber
  versions:
    name: Attach previous versions
    runs-on: ubuntu-latest
    needs: 
      - setup
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Download current release
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GH_ADMIN_TOKEN }}
          name: ${{needs.setup.outputs.ref}}
          path: book
      - name: Download previous versions
        run: |-
          for RELEASE in $(gh release list --exclude-drafts | cut -f1);
          do
            echo "Downloading $RELEASE"
            gh release download $RELEASE --pattern 'v*.tar' --output "book/versions/$RELEASE"
          done
      - name: Debug versions
        run: |-
          cd book/versions
          ls -al
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: book
  deploy:
    name: Deploy website
    runs-on: ubuntu-latest
    needs:
      - versions
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4